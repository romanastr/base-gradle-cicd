AWSTemplateFormatVersion: 2010-09-09
Description: "Automatic timed shutdown of EKS CI/CD cluster"
Parameters:
  OperationList:
    Type: CommaDelimitedList
    Description: "List of operations that will be invoked - lambda or cfn"
  LambdaDeleteName:
    Type: String
    Description: "Name of a Lambda function, which performs shut down operations"
Resources:
  TimedShutdownRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Shutdown EKS CI/CD cluster at specified time"
      ScheduleExpression: "cron(0/5 3 * * ? *)"
      Targets:
        -
          Arn: !GetAtt DeleteCFNLambda.Arn
          Id: DeleteCFNLambda
  DeleteCFNLambda:
    Type: AWS::Lambda::Function
    DependsOn:
      - DeleteCFNLambdaExecutionRole
    Properties:
      FunctionName: !Ref LambdaDeleteName
      Code:
        ZipFile: |
          import boto3
          import os

          operations = os.environ['Operations'].strip("[]").split(",")
          print("All operations " + str(operations))
          cfn = boto3.client('cloudformation')
          lam = boto3.client('lambda')

          def delete_cfn(stack_name):
              try:
                  print("Checking stack " + stack_name)
                  cfn.describe_stacks(StackName = stack_name)
                  print("Deleting stack " + stack_name)
                  cfn.delete_stack(StackName = stack_name)
              except Exception as ex:
                  print_exception(ex)
                  pass

          def invoke_lambda(function_name):
              try:
                  print("Invoking lambda function " + function_name)
                  lam.invoke(FunctionName = function_name, InvocationType = 'Event')
              except Exception as ex:
                  print_exception(ex)
                  pass

          def print_exception(exception):
              template = "Exception of type {0} with message \"{1}\" occurred"
              print(template.format(type(exception).__name__, str(exception)))

          def handler(event, context):
              for operation in operations:
                  print("Processing operation " + operation)
                  (action, name) = operation.strip("'").split(":")
                  switcher = {
                    "cfn": delete_cfn,
                    "lambda": invoke_lambda
                  }
                  switcher.get(action, lambda: "Wrong action")(name)
      Environment:
        Variables:
          Operations: !Join [",", !Ref OperationList]
      Handler: index.handler
      Runtime: python3.7
      Timeout: 5
      Role: !GetAtt DeleteCFNLambdaExecutionRole.Arn
  LogsLogGroupDelete:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaDeleteName}"
      RetentionInDays: "{{audit_expiration_days}}"
  PermissionForDeleteCFNLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaDeleteName}"
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt TimedShutdownRule.Arn
  DeleteCFNLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: lambda_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - cloudformation:De*
                  - lambda:InvokeFunction
                  - ec2:De*
                  - ec2:Dis*
                  - ec2:Re*
                  - iam:De*
                  - eks:De*
                  - elasticfilesystem:De*
                  - kms:ScheduleKeyDeletion
                  - logs:De*
                  - rds:De*
                  - mq:De*
                Resource: "*"
