AWSTemplateFormatVersion: 2010-09-09
Description: "EKS Cluster"
Parameters:
  ClusterName:
    Type: String
    Description: "Name of EKS cluster"
  CidrBlock:
    Type: String
    Description: "IPv4 CIDR block for the new VPC for the EKS cluster"
  AvailabilityZone1:
    Type: String
    Description: "First AZ for EKS cluster"
  AvailabilityZone2:
    Type: String
    Description: "Second AZ for EKS cluster"
  KubernetesVersion:
    Type: String
    Description: "Version of Kubernetes"
Resources:
  ControlPlane:
    Type: AWS::EKS::Cluster
    Properties:
      EncryptionConfig:
        - Provider:
            KeyArn: !GetAtt KmsSecretsKey.Arn
          Resources:
            - secrets
      Name: !Ref ClusterName
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref ControlPlaneSecurityGroup
        SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      RoleArn: !GetAtt ServiceRole.Arn
      Version: !Ref KubernetesVersion
    DependsOn:
      - KmsSecretsKey
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref CidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}/VPC
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZone1
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt VPC.CidrBlock, 4, 5 ]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: kubernetes.io/role/elb
          Value: 1
        - Key: Name
          Value: !Sub ${AWS::StackName}/PublicSubnet1
      VpcId: !Ref VPC
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZone2
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt VPC.CidrBlock, 4, 5 ]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: kubernetes.io/role/elb
          Value: 1
        - Key: Name
          Value: !Sub ${AWS::StackName}/PublicSubnet2
      VpcId: !Ref VPC
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZone1
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt VPC.CidrBlock, 4, 5 ]]
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: 1
        - Key: Name
          Value: !Sub ${AWS::StackName}/PrivateSubnet1
      VpcId: !Ref VPC
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZone2
      CidrBlock: !Select [ 3, !Cidr [ !GetAtt VPC.CidrBlock, 4, 5 ]]
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: 1
        - Key: Name
          Value: !Sub ${AWS::StackName}/PrivateSubnet2
      VpcId: !Ref VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}/InternetGateway
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}/NATGateway
  NATIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NATPrivateSubnetRoute1:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref PrivateRouteTable1
  NATPrivateSubnetRoute2:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref PrivateRouteTable2
  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Communication between the control plane and worker nodegroups"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}/ControlPlaneSecurityGroup
      VpcId: !Ref VPC
  PolicyCloudWatchMetrics:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - cloudwatch:PutMetricData
            Effect: Allow
            Resource: "*"
        Version: 2012-10-17
      PolicyName: !Sub ${AWS::StackName}-PolicyCloudWatchMetrics
      Roles:
        - !Ref ServiceRole
  PolicyNLB:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - elasticloadbalancing:*
              - ec2:CreateSecurityGroup
              - ec2:Describe*
            Effect: Allow
            Resource: "*"
        Version: 2012-10-17
      PolicyName: !Sub ${AWS::StackName}-PolicyNLB
      Roles:
        - !Ref ServiceRole
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}/PrivateRouteTable1
      VpcId: !Ref VPC
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}/PrivateRouteTable2
      VpcId: !Ref VPC
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}/PublicRouteTable
      VpcId: !Ref VPC
  PublicSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
    DependsOn:
      - VPCGatewayAttachment
  RouteTableAssociationPrivate1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1
  RouteTableAssociationPrivate2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2
  RouteTableAssociationPublic1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  RouteTableAssociationPublic2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
                - eks-fargate-pods.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
  KmsSecretsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: "KMS key for EKS secrets encryption"
      Enabled: true
      EnableKeyRotation: true
      PendingWindowInDays: 7
      KeyPolicy:
        Version: 2012-10-17
        Id: eks-key-policy
        Statement:
          - Sid: "Enable IAM user permissions"
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: "kms:*"
            Resource: "*"
          - Sid: "Allow use of the Key"
            Effect: Allow
            Principal:
              AWS: "*"
            Condition: {"StringEquals": {"kms:CallerAccount": !Sub "${AWS::AccountId}"}}
            Action:
              - kms:Des*
              - kms:*crypt*
              - kms:Generate*
              - kms:List*
              - kms:Get*
            Resource: "*"
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  ManagedNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref ClusterName
      NodegroupName: standard-workers
      ScalingConfig:
        MinSize: 1
        MaxSize: 2
        DesiredSize: 2
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      InstanceTypes:
        - t3a.small
      AmiType: AL2_x86_64
      NodeRole: !GetAtt NodeInstanceRole.Arn
      Labels:
        alpha.eksctl.io/cluster-name: !Ref ClusterName
        alpha.eksctl.io/nodegroup-name: standard-workers
      Tags:
        alpha.eksctl.io/nodegroup-name: standard-workers
        alpha.eksctl.io/nodegroup-type: managed
    DependsOn:
      - ControlPlane
  ClusterSharedNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Communication between all nodes in the cluster"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}/ClusterSharedNodeSecurityGroup
      VpcId: !Ref VPC
  IngressDefaultClusterToNodeSG:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "Allow managed and unmanaged nodes to communicate with each other (all ports)"
      FromPort: 0
      GroupId: !Ref ClusterSharedNodeSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !GetAtt ControlPlane.ClusterSecurityGroupId
      ToPort: 65535
  IngressInterNodeGroupSG:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "Allow nodes to communicate with each other (all ports)"
      FromPort: 0
      GroupId: !Ref ClusterSharedNodeSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref ClusterSharedNodeSecurityGroup
      ToPort: 65535
  IngressNodeToDefaultClusterSG:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "Allow unmanaged nodes to communicate with control plane (all ports)"
      FromPort: 0
      GroupId: !GetAtt ControlPlane.ClusterSecurityGroupId
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref ClusterSharedNodeSecurityGroup
      ToPort: 65535
  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
      Path: /
  LogsLogGroupEksCluster:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/eks/${ClusterName}/cluster"
      RetentionInDays: "{{audit_expiration_days}}"
Outputs:
  PrivateSubnet1:
    Export:
      Name: !Sub ${AWS::StackName}::PrivateSubnet1
    Value: !Ref PrivateSubnet1
  PrivateSubnet2:
    Export:
      Name: !Sub ${AWS::StackName}::PrivateSubnet2
    Value: !Ref PrivateSubnet2
  VPC:
    Export:
      Name: !Sub ${AWS::StackName}::VPC
    Value: !Ref VPC
