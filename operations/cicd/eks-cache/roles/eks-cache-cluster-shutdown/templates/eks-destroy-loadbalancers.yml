AWSTemplateFormatVersion: 2010-09-09
Description: "Automatic timed shutdown of EKS CI/CD cluster"
Resources:
  DestroyElbsLambda:
    Type: AWS::Lambda::Function
    DependsOn:
      - DestroyElbsLambdaExecutionRole
    Properties:
      FunctionName: "{{eks_lambda_destroy_lbs_name}}"
      Code:
        ZipFile: |
          import boto3
          import os

          target_vpc = os.environ['TargetVPC']
          elb_client = boto3.client('elb')
          ec2_client = boto3.client('ec2')

          def print_exception(exception):
              template = "Exception of type {0} with message \"{1}\" occurred"
              print(template.format(type(exception).__name__, str(exception)))

          def delete_lbs():
              bals = elb_client.describe_load_balancers()
              for elb in bals['LoadBalancerDescriptions']:
                  if(elb['VPCId'] == target_vpc):
                      try:
                          print("Deleting load balancer with name = " + elb['LoadBalancerName'])
                          elb_client.delete_load_balancer(LoadBalancerName = elb['LoadBalancerName'])
                      except Exception as ex:
                          print_exception(ex)
                          pass

          def delete_sgs():
              sgs = ec2_client.describe_security_groups(Filters=[{'Name': 'vpc-id', 'Values': [target_vpc]}])
              for sg in sgs['SecurityGroups']:
                  try:
                      print("Deleting a security group with id = " + sg['GroupId'])
                      ec2_client.delete_security_group(GroupId = sg['GroupId'])
                  except Exception as ex:
                         print_exception(ex)
                         pass

          def handler(event, context):
              delete_lbs()
              delete_sgs()
      Environment:
        Variables:
          TargetVPC: "{{eks_cache_cluster_vpc_id}}"
      Handler: index.handler
      Runtime: python3.7
      Timeout: 5
      Role: !GetAtt DestroyElbsLambdaExecutionRole.Arn
  PermissionForDestroyElbLambda:
    Type: AWS::Lambda::Permission
    DependsOn:
      - DestroyElbsLambda
    Properties:
      FunctionName: !GetAtt DestroyElbsLambda.Arn
      Action: lambda:InvokeFunction
      Principal: lambda.amazonaws.com
  DestroyElbsLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: lambda_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - elasticloadbalancing:*
                  - ec2:De*
                  - ec2:Dis
                  - ec2:Re*
                Resource: "*"
